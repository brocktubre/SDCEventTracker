//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Web;
using System.Web.Mvc;
using System.Web.WebPages.Html;

namespace SDCEventTracker.Models
{

    public partial class Event
    {
        public Event()
        {
            this.Results = new HashSet<Result>();
        }

        public int ID { get; set; }
        [Display(Name = "Event's Name")]
        [Required(ErrorMessage = "Please enter the event's name.")]
        public string EventName { get; set; }
        [DisplayFormat(DataFormatString = "{0:MM/dd/yyyy}", ApplyFormatInEditMode = true)]
        [DateStart(ErrorMessage = "Must be a future date")]
        [Required(ErrorMessage = "Please enter a date.")]
        public Nullable<System.DateTime> Date { get; set; }
        public string Location { get; set; }
        [Required(ErrorMessage = "Please enter the city.")]
        public string City { get; set; }
        [Required(ErrorMessage = "Must select a state.")]
        public string State { get; set; }
        [Required(ErrorMessage = "Zip is required.")]
        [RegularExpression(@"^\d{5}(-\d{4})?$", ErrorMessage = "Invalid Zip Code")]
        public Nullable<int> Zip { get; set; }
        [Display(Name = "Morning Hunt")]
        public Nullable<bool> MorningHunt { get; set; }
        [Display(Name = "Evening Hunt")]
        public Nullable<bool> EveningHunt { get; set; }
        [Display(Name = "Bench Show")]
        public Nullable<bool> BenchShow { get; set; }
        [Display(Name = "Barking Contest")]
        public Nullable<bool> BarkingContest { get; set; }
        public string Details { get; set; }

        public virtual ICollection<Result> Results { get; set; }
    }

    public sealed class DateStartAttribute : ValidationAttribute
    {
        public override bool IsValid(object value)
        {
            DateTime dateStart = (DateTime)value;
            // Meeting must start in the future time.
            return (dateStart > DateTime.Now);
        }
    }

    public sealed class DateEndAttribute : ValidationAttribute
    {
        public string DateStartProperty { get; set; }
        public override bool IsValid(object value)
        {
            // Get Value of the DateStart property
            string dateStartString = HttpContext.Current.Request[DateStartProperty];
            DateTime dateEnd = (DateTime)value;
            DateTime dateStart = DateTime.Parse(dateStartString);

            // Meeting start time must be before the end time
            return dateStart < dateEnd;
        }
    }
}
